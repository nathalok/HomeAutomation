{
  "name": "serialport2",
  "description": "node.js serial port driver.",
  "author": {
    "name": "Joe Ferner",
    "email": "joe.ferner@nearinfinity.com"
  },
  "keywords": [
    "serial",
    "serialport",
    "com",
    "comport",
    "arduino"
  ],
  "version": "0.0.5",
  "engines": {
    "node": ">=0.6.0"
  },
  "maintainers": [
    {
      "name": "Joe Ferner",
      "email": "joe.ferner@nearinfinity.com"
    }
  ],
  "bugs": {
    "url": "https://github.com/joeferner/node-serialport2/issues"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/joeferner/node-serialport2.git"
  },
  "dependencies": {
    "bindings": "0.3.0",
    "async": "0.1.18",
    "sf": "0.1.3",
    "optimist": "~0.3.4"
  },
  "devDependencies": {
    "nodeunit": "~0.7.4"
  },
  "scripts": {
    "test": "node ./node_modules/nodeunit/bin/nodeunit test",
    "install": "node-gyp rebuild"
  },
  "main": "./index.js",
  "bin": {
    "serialportlist": "./bin/serialportList.js",
    "serialportterm": "./bin/serialportTerminal.js"
  },
  "gypfile": true,
  "readme": "# SerialPort2\n\nNode.js serial port driver. Works on Windows, OSX, and linux.\n\n# Install\n\n```\nnpm install serialport2\n```\n\n**Note for windows users.** If you are using Node v0.6.x you will need to have Python 2.7 installed.\nSee [node-gyp](https://github.com/TooTallNate/node-gyp) for instruction on getting a working node-gyp\nenvironment.\n\n# Quick Example\n\n```javascript\nvar SerialPort = require('serialport2').SerialPort;\nvar port = new SerialPort();\n\nport.on('data', function(data) {\n  console.log(data.toString());\n});\n\nport.on('error', function(err) {\n  console.log(err);\n});\n\nport.open('COM4', {\n  baudRate: 9600,\n  dataBits: 8,\n  parity: 'none',\n  stopBits: 1\n}, function(err) {\n  port.write(\"hello world\");\n  port.close();\n});\n```\n\n```javascript\nvar sp = require('../');\nsp.list(function(err, ports) {\n  console.log(ports);\n});\n```\n\n# API\n\n## SerialPort\n\n### new SerialPort()\n\nCreates the serial port.\n\n### open(portName, [options], [callback])\n\nOpen the serial port.\n\n__Arguments__\n\n  * portName - The name of the port to open. Example: Windows 'COM1', Linux '/dev/ttyUSB0'.\n  * options - Options for open\n    * baudRate - The baud rate [default: 9600]\n    * dataBits - The data bits [default: 8]\n    * parity - The parity, can be (none, odd, even) [default: 'none']\n    * stopBits - The number of stop bits, can be (1, 1.5, 2) [default: 1]\n    * flowControl - Enable flow control (true, false) [default: false]\n  * callback(err) - Callback called after opening the port.\n\n### write(buffer, [callback])\n\nWrites data to the serial port.\n\n__Arguments__\n\n  * buffer - This can be a node Buffer object or a string.\n  * callback(err, byteWritten) - Callback called after writing bytes.\n\n### close(callback)\n\nCloses the serial port.\n\n__Arguments__\n\n  * callback(err) - Callback called after the port is closed.\n\n### Event: data\n\nEvent emitted by SerialPort when data is available. The first argument will contain a Buffer with the data.\n\n### Event: error\n\nEvent emitted by SerialPort if an error occurs. The first argument will contain the error.\n\n## list(callback)\n\nLists the serial ports on the machine.\n\n__Arguments__\n\n  * callback(err, ports) - Callback called after the list is retrieved.\n",
  "_id": "serialport2@0.0.5",
  "_from": "serialport2"
}
